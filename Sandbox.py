import subprocess
import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import pefile
from pdfminer.high_level import extract_text
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfparser import PDFParser
import docx
import olefile
import re

def get_report_name(filename):
    base_name = os.path.basename(filename)
    report_name = os.path.splitext(base_name)[0]
    report_path = os.path.join('reports', f"{report_name}.pdf")

    if os.path.exists(report_path):
        counter = 1
        while os.path.exists(report_path):
            report_path = os.path.join('reports', f"{report_name}({counter}).pdf")
            counter += 1

    return report_path

def create_pdf_report(report_text, verdict, filename):
    os.makedirs('reports', exist_ok=True)

    pdf_filename = get_report_name(filename)
    c = canvas.Canvas(pdf_filename, pagesize=letter)
    y_position = 750
    margin = 72
    lines = report_text.split('\n')
    for line in lines:
        if y_position < 72:  # margin bottom
            c.showPage()
            y_position = 750
        c.drawString(margin, y_position, line)
        y_position -= 14
    c.drawString(margin, y_position, f"Malware Verdict: {verdict}")
    c.save()
    print(f"Static analysis report saved as {pdf_filename}")

# Static analysis
def analyze_pe_file(filename):
    suspicious_imports = ['CreateRemoteThread', 'OpenProcess', 'VirtualAllocEx', 'WriteProcessMemory']
    report_text = f"Analyzing PE File: {filename}\n"
    is_malware = False
    try:
        pe = pefile.PE(filename)
        imports_found = any(imp.name in suspicious_imports for entry in pe.DIRECTORY_ENTRY_IMPORT for imp in entry.imports if hasattr(imp, 'name'))
        report_text += "Suspicious Imports Found:\n" if imports_found else "No Known Suspicious Imports Found.\n"
        report_text += "Criteria for Malware Detection Based on Imports:\n"
        report_text += "\n".join(suspicious_imports) + "\n"
        if imports_found:
            report_text += "Result: Potential malware (suspicious imports detected).\n"
            is_malware = True
        else:
            report_text += "Result: Likely not malware based on imports analysis.\n"
    except pefile.PEFormatError as e:
        report_text += f"Error processing file {filename}: {e}\n"
    return report_text, is_malware

def analyze_pdf_file(filename):
    report_text = f"Analyzing PDF File: {filename}\n"
    is_malware = False
    try:
        text = extract_text(filename)
        report_text += f"Extracted Text: {text[:500]}...\n"
        report_text += "Checking for JavaScript which is often used in PDF malware:\n"
        with open(filename, 'rb') as fp:
            parser = PDFParser(fp)
            doc = PDFDocument(parser)
            if any('/JS' in obj or '/JavaScript' in obj for obj in doc.catalog):
                report_text += "JavaScript found: Potential for malicious activity.\n"
                report_text += "Result: Potential malware.\n"
                is_malware = True
            elif any('/EXE' in obj or '/Execute' in obj for obj in doc.catalog):
                report_text += "Execute found: Potential for malicious activity.\n"
                report_text += "Result: Potential malware.\n"
                is_malware = True
            else:
                report_text += "No JavaScript found: Less likely to be malicious.\n"
                report_text += "Result: Likely not malware.\n"
    except Exception as e:
        report_text += f"Error processing PDF file {filename}: {e}\n"
    return report_text, is_malware

def analyze_docx_file(filename):
    report_text = f"Analyzing DOCX File: {filename}\n"
    is_malware = False
    try:
        doc = docx.Document(filename)
        text_preview = '\n'.join([para.text for para in doc.paragraphs][:10])
        report_text += f"Text Preview: {text_preview}\n"
        report_text += "Checking for inline shapes, often used to hide malicious elements:\n"
        if doc.inline_shapes:
            report_text += "Inline shapes found: Potential for hidden malicious elements.\n"
            report_text += "Result: Possible malware.\n"
            is_malware = True
        else:
            report_text += "No inline shapes found: Less likely to be malicious.\n"
        suspicious_keywords = ["AutoOpen", "AutoExec", "CreateObject", "Shell"]
        report_text += "Checking for suspicious keywords:\n"
        found_keywords = [keyword for keyword in suspicious_keywords if keyword in text_preview]
        if found_keywords:
            report_text += f"Suspicious keywords found: {', '.join(found_keywords)}\n"
            report_text += "Result: Potential malware.\n"
            is_malware = True
        else:
            report_text += "No suspicious keywords found.\n"
        report_text += "Checking for macros:\n"
        ole = olefile.OleFileIO(filename)
        macro_present = ole.exists('Macros') or ole.exists('VBA') or ole.exists('word/vbaProject.bin')
        if macro_present:
            report_text += "Macros found: Potential for malicious macros.\n"
            report_text += "Result: Potential malware.\n"
            is_malware = True
        else:
            report_text += "No macros found.\n"
        report_text += "Checking for OLE objects:\n"
        ole_objects = [entry for entry in ole.listdir() if entry[0].startswith('ObjectPool')]
        if ole_objects:
            report_text += f"OLE objects found: {len(ole_objects)} objects. Potential for hidden malicious elements.\n"
            report_text += "Result: Potential malware.\n"
            is_malware = True
        else:
            report_text += "No OLE objects found.\n"
        if doc.inline_shapes or found_keywords or macro_present or ole_objects:
            report_text += "Overall Result: Possible malware.\n"
            is_malware = True
        else:
            report_text += "Overall Result: Likely not malware.\n"
    except Exception as e:
        report_text += f"Error processing DOCX file {filename}: {e}\n"
    return report_text, is_malware

def analyze_python_file(filename):
    suspicious_imports = ['pynput', 'subprocess', 'os', 'smtplib', 'email']
    report_text = f"Analyzing Python Script: {filename}\n"
    is_malware = False
    try:
        with open(filename, 'r') as file:
            script_content = file.read()
        report_text += "Checking for suspicious imports:\n"
        found_suspicious_imports = [imp for imp in suspicious_imports if re.search(rf'\bimport\s+{imp}\b', script_content)]
        if found_suspicious_imports:
            report_text += f"Suspicious imports found: {', '.join(found_suspicious_imports)}\n"
            report_text += "Result: Potential malware (suspicious imports detected).\n"
            is_malware = True
        else:
            report_text += "No known suspicious imports found.\n"
        report_text += "\nRunning Bandit security analysis:\n"
        result = subprocess.run(['bandit', '-r', filename], text=True, capture_output=True)
        report_text += f"Security Analysis Results:\n{result.stdout}\n"
        if found_suspicious_imports or 'High severity' in result.stdout:
            report_text += "High-severity security issues or suspicious imports found: Likely malicious.\n"
            report_text += "Result: Possible malware.\n"
            is_malware = True
        else:
            report_text += "No high-severity issues or suspicious imports found: Likely safe.\n"
            report_text += "Result: Likely not malware.\n"
    except Exception as e:
        report_text += f"Error analyzing Python file {filename}: {e}\n"
    return report_text, is_malware



def analyze_file(filename):
    report_text=""
    report_text += "Static Analysis Report\n"
    
    is_malware_static = False
    
    if filename.endswith(('.exe', '.dll')):
        static_report, is_malware_static = analyze_pe_file(filename)
        report_text += static_report
    elif filename.endswith('.pdf'):
        static_report, is_malware_static = analyze_pdf_file(filename)
        report_text += static_report
    elif filename.endswith('.docx'):
        static_report, is_malware_static = analyze_docx_file(filename)
        report_text += static_report
    elif filename.endswith('.py'):
        static_report, is_malware_static = analyze_python_file(filename)
        report_text += static_report
    else:
        report_text += f"Unsupported file type: {filename}\n"

    # Determine final verdict based on dynamic and static analysis
    
    is_malware = is_malware_static
    verdict = "Malware" if is_malware else "Not Malware"
    
    create_pdf_report(report_text, verdict, filename)

    return verdict,get_report_name(filename)
